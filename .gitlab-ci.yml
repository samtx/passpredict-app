# # This file is a template, and might need editing before it works on your project.
# stages:
#   - build
#   - test
#   - push
#   - deploy

# variables:
#     LOCAL_IMAGE_TAG: $CI_REGISTRY_IMAGE/passpredict:$CI_COMMIT_SHORT_SHA
#     DEPLOY_IMAGE_TAG: $CI_REGISTRY_IMAGE/passpredict:$CI_COMMIT_REF_NAME
#     LATEST_IMAGE_TAG: $CI_REGISTRY_IMAGE/passpredict:latest
#     # CI_DEBUG_TRACE: "true"
#     # DOCKER_HOST: tcp://docker:2376
#     # DOCKER_TLS_CERTDIR: "/certs"
#     # DOCKER_TLS_VERIFY: 1
#     # DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

# # Build docker image
# build:
#   stage: build
#   script:
#     - docker build -t $LOCAL_IMAGE_TAG -t $DEPLOY_IMAGE_TAG -t $LATEST_IMAGE_TAG --label git-commit=$CI_COMMIT_SHORT_SHA .
#   tags:
#     - shell
#     - docker

# # Test docker image
# test:
#   stage: test
#   before_script:
#     - docker run --rm -d -p 6378:6379 --name redis redis:latest
#     - docker run --rm -d -p 5432:5432 -e POSTGRES_PASSWORD=password123 --name postgres postgres:13
#   script:
#     - |
#       docker run \
#         --add-host host.docker.internal:host-gateway \
#         -e REDIS_HOST=redis \
#         -e POSTGRES_HOST=postgres \
#         -e POSTGRES_USER=postgres
#         -e POSTGRES_PASSWORD=password123 \
#         --link=postgres:postgres \
#         --link=redis:redis \
#         $LOCAL_IMAGE_TAG \
#         /bin/bash -c "pip install pytest pytest-randomly pytest-redis pytest-mock && pytest -v"
#   after_script:
#     - docker container stop redis-test
#   tags:
#     - shell
#     - docker

# # Push docker image to container registry
# push:
#   stage: push
#   before_script:
#     - echo "CI_COMMIT_BRANCH $CI_COMMIT_BRANCH"
#     - echo "CI_COMMIT_REF_PROTECTED $CI_COMMIT_REF_PROTECTED"
#   script:
#     - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
#     - docker tag $LOCAL_IMAGE_TAG $DEPLOY_IMAGE_TAG
#     - docker push $DEPLOY_IMAGE_TAG
#     - docker tag $DEPLOY_IMAGE_TAG $LATEST_IMAGE_TAG
#     - docker push $LATEST_IMAGE_TAG
#   rules:
#     - if: '$CI_COMMIT_BRANCH'
#       when: never
#     - if: '$CI_PIPELINE_SOURCE != "push"'
#       when: never
#     - if: '$CI_COMMIT_REF_PROTECTED'
#   tags:
#     - shell
#     - api

# # Deploy docker image to server and run it
# # Deploy to DigitalOcean Droplet at passpredict.com
# deploy:
#   stage: deploy
#   before_script:
#     - echo "CI_COMMIT_BRANCH $CI_COMMIT_BRANCH"
#     - echo "CI_COMMIT_REF_PROTECTED $CI_COMMIT_REF_PROTECTED"
#   script:
#     - echo "Stopping old container named 'api'..."
#     - docker container ls -a | grep "\sapi$" | awk '{print $NF}' | xargs docker container stop || true
#     - echo "Removing old container named 'api'..."
#     - docker container ls -a | grep "\sapi$" | awk '{print $NF}' | xargs docker container rm || true
#     - echo "Starting new container named 'api'..."
#     - |
#       docker run -d --name api \
#         --restart=unless-stopped \
#         -p 8000:8000 \
#         -e REDIS_HOST=redis \
#         -e DT_SECONDS=5 \
#         -e DATABASE_URI=sqlite:////db/passpredict.sqlite \
#         -e CORS_ORIGINS=* \
#         --link=redis:redis \
#         -v passpredict-api-db:/db \
#         $DEPLOY_IMAGE_TAG
#   rules:
#     - if: '$CI_COMMIT_BRANCH'
#       when: never
#     - if: '$CI_PIPELINE_SOURCE != "push"'
#       when: never
#     - if: '$CI_COMMIT_REF_PROTECTED'
#       when: manual
#   tags:
#     - shell
#     - api
