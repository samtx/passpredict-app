name: Build and Push API Docker Image

on:
  push:
    branches: [ "main", "deploy-action" ]

env:
  CR_URL: ewr.vultrcr.com
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Login to Vultr Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CR_URL }}
          username: ${{ secrets.VULTR_CR_USERNAME }}
          password: ${{ secrets.VULTR_CR_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.CR_URL }}/passpredict/api
          tags: |
            type=sha
            type=raw,value=latest
          labels: |
              org.opencontainers.image.revision={{sha}}
              org.opencontainers.image.created={{commit_date 'YYYY-MM-DDTHH:mm:ss.SSS[Z]'}}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: "{{defaultContext}}:backend-api"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: [build-and-push]
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
    
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_KEY" > ~/.ssh/deploy
          chmod 600 ~/.ssh/deploy
          cat >>~/.ssh/config <<EOF
          HOST production
            HostName $SSH_HOST
            Port $SSH_PORT
            User $SSH_USER
            IdentityFile ~/.ssh/deploy
            StrictHostKeyChecking no
          EOF
          cat ~/.ssh/config
        env:
          SSH_USER: ${{ vars.PRODUCTION_USER }} 
          SSH_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
          SSH_HOST: ${{ vars.PRODUCTION_HOST }}
          SSH_PORT: ${{ vars.PRODUCTION_PORT }}

      - name: Configure Docker context
        run: |
          docker context create production --docker "host=ssh://production"
          docker context inspect production

      - name: Login to Vultr Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CR_URL }}
          username: ${{ secrets.VULTR_CR_USERNAME }}
          password: ${{ secrets.VULTR_CR_PASSWORD }}

      - name: Deploy stack
        run: docker --context production stack deploy --compose-file=infra/stack.prod.yaml passpredict --with-registry-auth --detach=true --prune --resolve-image=always

      - name: Check services
        run: |
          docker --context production stack ps passpredict --filter "desired-state=running" --no-trunc --format json | \
          jq '{Name, Image, DesiredState, CurrentState, Error} | tojson' \
          > stack.json
          cat stack.json
          # echo "stack=$(cat stack.json)" >> "$GITHUB_OUTPUT" 
      
      - uses: buildingcash/json-to-markdown-table-action@v1
        id: table
        with:
          json_file_path: "stack.json"

      - name: Output summary
        env:
          STACK_TABLE: ${{ steps.table.outputs.table }}
        run: echo "$STACK_TABLE" >> $GITHUB_STEP_SUMMARY
        
